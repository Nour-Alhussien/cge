name: LCLD
dataset: data/lcld_venus.csv
desc: credit requests dataset that can be accepted or rejected


cpgd:
  feat_file:  "data/lcld_update_type.csv"

constraints:
  immutable:
    - int_rate
    - grade
    - issue_d
    - earliest_cr_line
    - pub_rec
    - pub_rec_bankruptcies
    - fico_score
    - initial_list_status_w
    - diff_issue_d_earliest_cr_line
    - ratio_pub_rec_diff_issue_d_earliest_cr_line
    - ratio_pub_rec_bankruptcies_diff_issue_d_earliest_cr_line
    - ratio_pub_rec_bankruptcies_pub_rec
    - home_ownership_MORTGAGE
    - home_ownership_OTHER
    - home_ownership_OWN
    - home_ownership_RENT
    - verification_status_Not Verified
    - verification_status_Source Verified
    - verification_status_Verified
    - charged_off

  predicates:
    # c1: installment calculation
    def c1(installment, calculated_installment):
        calculated_installment = (
          np.ceil( 100 * (loan_amnt * (int_rate / 1200) * (1 + int_rate / 1200) ** term)
            / ((1 + int_rate / 1200) ** term - 1)) / 100 )
        return installment == calculated_installment

    # c2: check open_acc
    def c2(open_acc, total_acc):
      return open_acc <= total_acc

    # c3: check pub_rec_bankruptcies
    def c3(pub_rec_bankruptcies, pub_rec):
        return pub_rec_bankruptcies <= pub_rec

    # c4: check term
    def c4(term):
        return term == 36 or term == 60

    # c5: check ratio_loan_amnt_annual_inc
    def c5(ratio_loan_amnt_annual_inc, loan_amnt, annual_inc):
        return ratio_loan_amnt_annual_inc == loan_amnt / annual_inc

    # c6: check ratio_open_acc_total_acc
    def c6(ratio_open_acc_total_acc, open_acc, total_acc):
        return ratio_open_acc_total_acc == open_acc / total_acc

    # c7: check diff_issue_d_earliest_cr_line
    def c7(diff_issue_d_earliest_cr_line, issue_d, earliest_cr_line):
        return diff_issue_d_earliest_cr_line == (self._date_feature_to_month(issue_d)
                 - self._date_feature_to_month(earliest_cr_line))

    # c8: check ratio_pub_rec_diff_issue_d_earliest_cr_line
    def c8(ratio_pub_rec_diff_issue_d_earliest_cr_line, pub_rec, diff_issue_d_earliest_cr_line):
        return ratio_pub_rec_diff_issue_d_earliest_cr_line == pub_rec / diff_issue_d_earliest_cr_line

    # c9: check ratio_pub_rec_bankruptcies_diff_issue_d_earliest_cr_line
    def c9(ratio_pub_rec_bankruptcies_diff_issue_d_earliest_cr_line, pub_rec_bankruptcies, \
            diff_issue_d_earliest_cr_line):
        return ratio_pub_rec_bankruptcies_diff_issue_d_earliest_cr_line == pub_rec_bankruptcies
                 / diff_issue_d_earliest_cr_line

    # c10: check ratio
    #    def c10(x_ml, ratio_mask):
      #        ratio = np.empty(x_ml.shape[0])
      #        ratio = np.ma.masked_array(ratio, mask=ratio_mask, fill_value=-1).filled()
      #        ratio[~ratio_mask] = x_ml[~ratio_mask, 16] / x_ml[~ratio_mask, 11]
      #        ratio[ratio == np.inf] = -1
      #        ratio[np.isnan(ratio)] = -1
      #        return x_ml[:, 25] == ratio

    - c1 or c2 or c3 or c4 or c5 or c6 or c7 or c8 or c9